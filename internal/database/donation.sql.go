// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: donation.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createDonation = `-- name: CreateDonation :one
INSERT INTO donation(id,  created_at, updated_at ,amount, user_id, non_profit_name)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2,
    $3
)
    RETURNING id, created_at, updated_at, amount, user_id, non_profit_name
`

type CreateDonationParams struct {
	Amount        int32
	UserID        uuid.UUID
	NonProfitName string
}

func (q *Queries) CreateDonation(ctx context.Context, arg CreateDonationParams) (Donation, error) {
	row := q.db.QueryRowContext(ctx, createDonation, arg.Amount, arg.UserID, arg.NonProfitName)
	var i Donation
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Amount,
		&i.UserID,
		&i.NonProfitName,
	)
	return i, err
}

const showDonations = `-- name: ShowDonations :many
SELECT non_profit_name as name, amount
FROM donation
JOIN non_profit
ON non_profit.name = donation.non_profit_name
WHERE user_id = $1
`

type ShowDonationsRow struct {
	Name   string
	Amount int32
}

func (q *Queries) ShowDonations(ctx context.Context, userID uuid.UUID) ([]ShowDonationsRow, error) {
	rows, err := q.db.QueryContext(ctx, showDonations, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShowDonationsRow
	for rows.Next() {
		var i ShowDonationsRow
		if err := rows.Scan(&i.Name, &i.Amount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
