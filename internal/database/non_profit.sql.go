// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: non_profit.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createNonProfit = `-- name: CreateNonProfit :one
INSERT INTO non_profit(id, created_at, updated_at, name, address, email, owner_id)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2,
    $3,
    $4
)
    
    RETURNING id, created_at, updated_at, address, name, email, owner_id
`

type CreateNonProfitParams struct {
	Name    string
	Address string
	Email   string
	OwnerID uuid.UUID
}

func (q *Queries) CreateNonProfit(ctx context.Context, arg CreateNonProfitParams) (NonProfit, error) {
	row := q.db.QueryRowContext(ctx, createNonProfit,
		arg.Name,
		arg.Address,
		arg.Email,
		arg.OwnerID,
	)
	var i NonProfit
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Address,
		&i.Name,
		&i.Email,
		&i.OwnerID,
	)
	return i, err
}

const deleteNonProfits = `-- name: DeleteNonProfits :exec
DELETE FROM non_profit
`

func (q *Queries) DeleteNonProfits(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteNonProfits)
	return err
}

const getNonProfByName = `-- name: GetNonProfByName :one
SELECT id, created_at, updated_at, address, name, email, owner_id FROM non_profit
WHERE name = $1
`

func (q *Queries) GetNonProfByName(ctx context.Context, name string) (NonProfit, error) {
	row := q.db.QueryRowContext(ctx, getNonProfByName, name)
	var i NonProfit
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Address,
		&i.Name,
		&i.Email,
		&i.OwnerID,
	)
	return i, err
}
